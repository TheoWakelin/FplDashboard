// <auto-generated />
using System;
using FplDashboard.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FplDashboard.Migrations.Migrations
{
    [DbContext(typeof(FplDashboardDbContext))]
    partial class FplDashboardDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FplDashboard.DataModel.Models.GameWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AverageEntryScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeadlineTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameWeekNumber")
                        .HasColumnType("int");

                    b.Property<int?>("HighestScore")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("YearSeasonStarted")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameWeekNumber", "YearSeasonStarted")
                        .IsUnique();

                    b.ToTable("GameWeeks");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Bonus")
                        .HasColumnType("int");

                    b.Property<int>("CleanSheets")
                        .HasColumnType("int");

                    b.Property<int>("GoalsConceded")
                        .HasColumnType("int");

                    b.Property<int>("GoalsScored")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<double>("NowCost")
                        .HasColumnType("float");

                    b.Property<int>("OwnGoals")
                        .HasColumnType("int");

                    b.Property<int>("PenaltiesMissed")
                        .HasColumnType("int");

                    b.Property<int>("PenaltiesSaved")
                        .HasColumnType("int");

                    b.Property<double>("PointsPerGame")
                        .HasColumnType("float");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("Saves")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<string>("WebName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.PlayerGameWeekData", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("GameWeekId")
                        .HasColumnType("int");

                    b.Property<int>("Bps")
                        .HasColumnType("int");

                    b.Property<double?>("ChanceOfPlayingNextRound")
                        .HasColumnType("float");

                    b.Property<double?>("ChanceOfPlayingThisRound")
                        .HasColumnType("float");

                    b.Property<double>("Creativity")
                        .HasColumnType("float");

                    b.Property<double>("DefensiveContributionPer90")
                        .HasColumnType("float");

                    b.Property<int>("EventPoints")
                        .HasColumnType("int");

                    b.Property<double>("ExpectedAssistsPer90")
                        .HasColumnType("float");

                    b.Property<double>("ExpectedGoalInvolvementsPer90")
                        .HasColumnType("float");

                    b.Property<double>("ExpectedGoalsConcededPer90")
                        .HasColumnType("float");

                    b.Property<double>("ExpectedGoalsPer90")
                        .HasColumnType("float");

                    b.Property<double>("Form")
                        .HasColumnType("float");

                    b.Property<double>("IctIndex")
                        .HasColumnType("float");

                    b.Property<double>("Influence")
                        .HasColumnType("float");

                    b.Property<double>("NowCost")
                        .HasColumnType("float");

                    b.Property<double>("SavesPer90")
                        .HasColumnType("float");

                    b.Property<double>("SelectedByPercent")
                        .HasColumnType("float");

                    b.Property<double>("Threat")
                        .HasColumnType("float");

                    b.Property<double>("ValueForm")
                        .HasColumnType("float");

                    b.Property<double>("ValueSeason")
                        .HasColumnType("float");

                    b.HasKey("PlayerId", "GameWeekId");

                    b.HasIndex("GameWeekId");

                    b.ToTable("PlayerGameWeekData");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.PlayerNews", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NewsAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("News")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("PlayerId", "NewsAdded");

                    b.ToTable("PlayerNews");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.TeamGameWeekData", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("GameWeekId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Form")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("StrengthAttackAway")
                        .HasColumnType("int");

                    b.Property<int>("StrengthAttackHome")
                        .HasColumnType("int");

                    b.Property<int>("StrengthDefenceAway")
                        .HasColumnType("int");

                    b.Property<int>("StrengthDefenceHome")
                        .HasColumnType("int");

                    b.Property<int>("StrengthOverallAway")
                        .HasColumnType("int");

                    b.Property<int>("StrengthOverallHome")
                        .HasColumnType("int");

                    b.HasKey("TeamId", "GameWeekId");

                    b.HasIndex("GameWeekId");

                    b.ToTable("TeamGameWeekData");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.Player", b =>
                {
                    b.HasOne("FplDashboard.DataModel.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.PlayerGameWeekData", b =>
                {
                    b.HasOne("FplDashboard.DataModel.Models.GameWeek", "GameWeek")
                        .WithMany("PlayerGameWeekData")
                        .HasForeignKey("GameWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FplDashboard.DataModel.Models.Player", "Player")
                        .WithMany("PlayerGameWeekData")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameWeek");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.PlayerNews", b =>
                {
                    b.HasOne("FplDashboard.DataModel.Models.Player", "Player")
                        .WithMany("News")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.TeamGameWeekData", b =>
                {
                    b.HasOne("FplDashboard.DataModel.Models.GameWeek", "GameWeek")
                        .WithMany("TeamGameWeekData")
                        .HasForeignKey("GameWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FplDashboard.DataModel.Models.Team", "Team")
                        .WithMany("TeamGameWeekData")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameWeek");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.GameWeek", b =>
                {
                    b.Navigation("PlayerGameWeekData");

                    b.Navigation("TeamGameWeekData");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.Player", b =>
                {
                    b.Navigation("News");

                    b.Navigation("PlayerGameWeekData");
                });

            modelBuilder.Entity("FplDashboard.DataModel.Models.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("TeamGameWeekData");
                });
#pragma warning restore 612, 618
        }
    }
}
